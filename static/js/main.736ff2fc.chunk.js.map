{"version":3,"sources":["Resources/Resume.pdf","Components/Landing.js","Components/NavBar.js","Components/Resume.js","Components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","className","NavBar","props","Navbar","sticky","bg","Brand","Nav","Link","as","to","eventKey","ResumePage","src","resume","allowFullScreen","Projects","href","style","marginTop","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,wOCe5BC,G,YAZC,WACZ,OACQ,yBAAKC,UAAW,kBACZ,wBAAIA,UAAW,QAAf,iBACA,yBAAKA,UAAW,kBACZ,uBAAGA,UAAW,UAAd,yQACA,uBAAGA,UAAW,UAAd,gN,4BCHL,SAASC,EAAQC,GAC5B,OACI,kBAACC,EAAA,EAAD,CAAQC,OAAQ,MAAOC,GAAI,SACvB,kBAACF,EAAA,EAAOG,MAAR,KACI,uCAEJ,kBAACC,EAAA,EAAD,CAAKP,UAAW,WACZ,kBAACO,EAAA,EAAIC,KAAL,CACIC,GAAID,IACJE,GAAI,IACJC,SAAU,QAHd,QAMA,kBAACJ,EAAA,EAAIC,KAAL,CACIC,GAAID,IACJE,GAAI,UACJC,SAAU,UAHd,UAMA,kBAACJ,EAAA,EAAIC,KAAL,CACIC,GAAID,IACJE,GAAI,YACJC,SAAU,YAHd,c,qBCRDC,G,MAXI,WACf,OACI,6BACI,yBAAKZ,UAAW,oBACZ,4BAAQa,IAAKC,IAASC,iBAAe,QC+DtCC,G,MAtEE,WACb,OACI,yBAAKhB,UAAW,aACZ,yBAAKA,UAAW,WACZ,wBAAIA,UAAW,cAAf,eACA,yjBAMA,wWAIA,uBAAGiB,KAAM,2BAAT,sBACA,uBAAGC,MAAO,CAACC,UAAW,SAAtB,2BAEJ,yBAAKnB,UAAW,MACZ,wBAAIA,UAAW,cAAf,0BACA,8QAGA,gDACA,8oBAIA,iDACA,saAGI,6BACA,6BAJJ,6UAMI,6BAAK,6BANT,6SAQI,6BAAK,6BART,uEAWA,yDAEI,4BACI,gEACA,wDACA,gDACA,qCACA,4CACA,iDACA,gDACA,qCACA,iDAGR,uBAAGkB,MAAO,CAACC,UAAW,SAAtB,2BAEJ,yBAAKnB,UAAW,WACZ,wBAAIA,UAAW,cAAf,2BACA,ySAEI,6BAFJ,0OAKA,uBAAGiB,KAAM,8CAAT,eACA,uBAAGC,MAAO,CAACC,UAAW,SAAtB,8BC9CDC,MAbf,WACE,OACI,yBAAKpB,UAAW,OAChB,kBAAC,IAAD,CAAYqB,SAAU,KAClB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWzB,IACnC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAM,UAAWC,UAAWZ,IACzC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAM,YAAaC,UAAWR,OCHjCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.736ff2fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume.6e4d8b4d.pdf\";","import React from 'react';\r\nimport \"../Styles/Landing.css\"\r\n\r\nconst Landing = () => {\r\n    return (\r\n            <div className={\"name-container\"}>\r\n                <h2 className={\"name\"}>Darryl Munsch</h2>\r\n                <div className={\"text-container\"}>\r\n                    <p className={\"p-text\"}>Hello! I'm Darryl. I am currently a student at Southeastern Louisiana University. I am working towards a degree in Information Technology and focusing on honing my skills in React Web/Native development as well as diving in to .Net(core) + related frameworks.  </p>\r\n                    <p className={\"p-text\"}>I'm dedicated to my work and am continuously learning more in this ever expanding field. I pride myself in well-written code as well as doing my best in learning and following the best practices also.</p>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Styles/NavBar.css\"\r\n\r\nexport default function NavBar (props) {\r\n    return (\r\n        <Navbar sticky={\"top\"} bg={\"black\"}>\r\n            <Navbar.Brand>\r\n                <strong>DM</strong>\r\n            </Navbar.Brand>\r\n            <Nav className={\"mr-auto\"} >\r\n                <Nav.Link\r\n                    as={Link}\r\n                    to={\"/\"}\r\n                    eventKey={\"home\"}>\r\n                    Home\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                    as={Link}\r\n                    to={\"/Resume\"}\r\n                    eventKey={\"resume\"}>\r\n                    Resume\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                    as={Link}\r\n                    to={\"/Projects\"}\r\n                    eventKey={\"projects\"}>\r\n                    Projects\r\n                </Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}","import React from 'react';\r\nimport resume from '../Resources/Resume.pdf'\r\nimport \"../Styles/resume.css\"\r\n\r\n\r\n\r\nconst ResumePage = () => {\r\n    return (\r\n        <div>\r\n            <div className={\"iframe-container\"}>\r\n                <iframe src={resume}  allowFullScreen/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default ResumePage;\r\n","import React from 'react';\r\nimport \"../Styles/Projects.css\";\r\nimport {HashLink as Link} from \"react-router-dom\";\r\nconst Projects = () => {\r\n    return (\r\n        <div className={\"container\"}>\r\n            <div className={\"tapster\"}>\r\n                <h2 className={\"title-text\"}>Tapster App</h2>\r\n                <p>\r\n                    The Tapster App was my first step into the world of full stack web development.\r\n                    For a sophomore Software Engineering course, we were required to create a piece of functional software for a client.\r\n                    Tapster allows users to search for an alcoholic mixed drink by the name or ingredients and displays the results with instructions on how to make the drink.\r\n                    Leading a four person team and following the Agile design principles, I worked with the client in order to guarantee his expectations were met and he was satisfied with our end product.\r\n                </p>\r\n                <p>\r\n                    The Tapster App is developed completely in JavaScript. We built the backend using NodeJS and Express, as well as using MongoDB to store our data.\r\n                    A RestAPI was developed to handle search queries as well as user authentication was also implemented. The front end was built using the ReactJS framework and was deployed with Heroku.\r\n                </p>\r\n                <a href={\"https://tapster-app.com\"}>Check it out here!</a>\r\n                <p style={{marginTop: \"10px\"}}>(Pictures Coming Soon)</p>\r\n            </div>\r\n            <div className={\"ag\"}>\r\n                <h2 className={\"title-text\"}>Envoc Aggriculture App</h2>\r\n                <p>\r\n                    The Envoc Aggriculture App was a Junior level Software Project. Working on a team of four, the goal was to set up a fully functioning Asp.Net Core backend with a ReactJS web app alongside a React Native mobile app, once again for a client.\r\n                </p>\r\n                <strong>The Client: </strong>\r\n                <p>\r\n                    Our client was the owner of a business that allowed customers to pick their own fresh produce directly from their farm fields. We communicated with the client at least once every two weeks to ensure they were kept satisfied and engaged during the development process. They wanted their customers to be able to streamline their experience by giving them the ability to\r\n                    purchase tickets online via a mobile application and web application. They expressed their needs for mandatory features such as viewing available farm fields and produce, and purchasing tickets for those fields online. The mobile app being in most demand.\r\n                </p>\r\n                <strong>The Process: </strong>\r\n                <p>\r\n                    Deciding to do two-week sprint cycles with weekly team meetings, our team started with backend development first. The backend construction consisted of setting up various controllers for the api which were each rigorously Unit Tested for proper functionality,\r\n                    implementing a MYSQL database connection via EF Core, as well as implementing EF Core Identity for Authentication and Authorization.\r\n                    <br/>\r\n                    <br/>\r\n                    The web app was built using ReactJS and gave the client's customers the ability to view in-depth information on each of the client's farm fields available, as well as purchase tickets through the use of PayPal. The users also had the ability to register for an account where their purchased tickets would be stored for future use.\r\n                    <br/><br/>\r\n                    Using React Native we developed a mobile app that gave our client's customers the ability to browse farm fields, login and register for an account, view previously purchased tickets, and purchase new tickets as well. Customers were then able to redeem a valid ticket using a QR code on their phone.\r\n                    <br/><br/>\r\n                    The project was then deployed for the client using Microsoft Azure.\r\n                </p>\r\n                <p>\r\n                    Skills / Technologies used:\r\n                    <ul>\r\n                        <li>Jira Project Management Software</li>\r\n                        <li>BitBucket Source Control</li>\r\n                        <li>ReactJS & Native</li>\r\n                        <li>Redux</li>\r\n                        <li>Asp.Net Core</li>\r\n                        <li>EF Core Framework</li>\r\n                        <li>EF Core Identity</li>\r\n                        <li>MySQL</li>\r\n                        <li>Microsoft Azure</li>\r\n                    </ul>\r\n                </p>\r\n                <p style={{marginTop: \"10px\"}}>(Pictures Coming Soon)</p>\r\n            </div>\r\n            <div className={\"discord\"}>\r\n                <h2 className={\"title-text\"}>Discord Bot (.Net Core)</h2>\r\n                <p>\r\n                    During spare time, I began the development of a discord bot that made various API calls from various websites and handled serializing and deserializing json data into C# Objects using the JSON.NET library and then posting the results in the specified discord channel.\r\n                    <br/>\r\n                    Some of the abilities included searching the YouTube API for a video based on a search query, retrieving high-score data for a specified Fortnite player or fetching the daily in-game Item Shop, and using Tenor's API to fetch Gifs.\r\n                </p>\r\n                <a href={\"https://github.com/darrylmunsch/DiscordBot\"}>GitHub Repo</a>\r\n                <p style={{marginTop: \"10px\"}}>(Pictures Coming Soon)</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport './App.css';\nimport Landing from \"./Components/Landing\";\nimport NavBar from \"./Components/NavBar\";\nimport ResumePage from \"./Components/Resume\";\nimport Projects from \"./Components/Projects\";\n\nfunction App() {\n  return (\n      <div className={\"App\"}>\n      <HashRouter basename={\"/\"}>\n          <NavBar/>\n          <Route exact path={\"/\"} component={Landing}/>\n          <Route exact path={\"/Resume\"} component={ResumePage}/>\n          <Route exact path={\"/Projects\"} component={Projects}/>\n      </HashRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}