{"version":3,"sources":["Resources/Resume.pdf","Components/Landing.js","Components/NavBar.js","Components/Resume.js","Components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","className","NavBar","props","Navbar","sticky","Brand","Nav","Link","as","to","eventKey","ResumePage","src","resume","allowFullScreen","Projects","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,mNCW5BC,G,YARC,WACZ,OACI,yBAAKC,UAAW,iB,sBCAT,SAASC,EAAQC,GAC5B,OACI,kBAACC,EAAA,EAAD,CAAQC,OAAQ,OACZ,kBAACD,EAAA,EAAOE,MAAR,KACI,uCAEJ,kBAACC,EAAA,EAAD,CAAKN,UAAW,WACZ,kBAACM,EAAA,EAAIC,KAAL,CACIC,GAAID,IACJE,GAAI,IACJC,SAAU,QAHd,QAMA,kBAACJ,EAAA,EAAIC,KAAL,CACIC,GAAID,IACJE,GAAI,UACJC,SAAU,UAHd,UAMA,kBAACJ,EAAA,EAAIC,KAAL,CACIC,GAAID,IACJE,GAAI,YACJC,SAAU,YAHd,c,qBCNDC,G,YAXI,WACf,OACI,6BACI,yBAAKX,UAAW,oBACZ,4BAAQY,IAAKC,IAASC,iBAAe,QCDtCC,G,MARE,WACb,OACI,yBAAKf,UAAW,aACZ,wBAAIA,UAAW,QAAf,kBCgBGgB,MAbf,WACE,OACI,yBAAKhB,UAAW,OAChB,kBAAC,IAAD,CAAYiB,SAAU,KAClB,kBAAChB,EAAD,MACA,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAM,IAAKC,UAAWrB,IACnC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAM,UAAWC,UAAWT,IACzC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAM,YAAaC,UAAWL,OCHjCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf51e506.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume.6e4d8b4d.pdf\";","import React from 'react';\r\nimport \"../Styles/Landing.css\"\r\n\r\nconst Landing = () => {\r\n    return (\r\n        <div className={\"background\"}>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default function NavBar (props) {\r\n    return (\r\n        <Navbar sticky={\"top\"}>\r\n            <Navbar.Brand>\r\n                <strong>DM</strong>\r\n            </Navbar.Brand>\r\n            <Nav className={\"mr-auto\"} >\r\n                <Nav.Link\r\n                    as={Link}\r\n                    to={\"/\"}\r\n                    eventKey={\"home\"}>\r\n                    Home\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                    as={Link}\r\n                    to={\"/Resume\"}\r\n                    eventKey={\"resume\"}>\r\n                    Resume\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                    as={Link}\r\n                    to={\"/Projects\"}\r\n                    eventKey={\"projects\"}>\r\n                    Projects\r\n                </Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}","import React from 'react';\r\nimport resume from '../Resources/Resume.pdf'\r\nimport { PDFReader } from 'reactjs-pdf-reader';\r\nimport \"../Styles/resume.css\"\r\n\r\n\r\n\r\nconst ResumePage = () => {\r\n    return (\r\n        <div>\r\n            <div className={\"iframe-container\"}>\r\n                <iframe src={resume}  allowFullScreen />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default ResumePage;\r\n","import React from 'react';\r\nimport \"../Styles/Projects.css\";\r\nconst Projects = () => {\r\n    return (\r\n        <div className={\"container\"}>\r\n            <h1 className={\"text\"}>Coming Soon</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport './App.css';\nimport Landing from \"./Components/Landing\";\nimport NavBar from \"./Components/NavBar\";\nimport ResumePage from \"./Components/Resume\";\nimport Projects from \"./Components/Projects\";\n\nfunction App() {\n  return (\n      <div className={\"App\"}>\n      <HashRouter basename={\"/\"}>\n          <NavBar/>\n          <Route exact path={\"/\"} component={Landing}/>\n          <Route exact path={\"/Resume\"} component={ResumePage}/>\n          <Route exact path={\"/Projects\"} component={Projects}/>\n      </HashRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}